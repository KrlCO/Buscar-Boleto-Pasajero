#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de instalaci√≥n de dependencias para BuscaDatosPasajero
Instala todas las dependencias necesarias incluyendo herramientas de compilaci√≥n
para evitar problemas con las 'ruedas' en diferentes versiones de Python.
"""

import subprocess
import sys
import os

def run_command(command, description):
    """Ejecuta un comando y maneja errores"""
    print(f"\n{'='*60}")
    print(f"üîß {description}")
    print(f"{'='*60}")
    print(f"Ejecutando: {command}")
    
    try:
        result = subprocess.run(command, shell=True, check=True, 
                              capture_output=True, text=True)
        print("‚úÖ √âxito!")
        if result.stdout:
            print(result.stdout)
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Error: {e}")
        if e.stdout:
            print(f"Salida: {e.stdout}")
        if e.stderr:
            print(f"Error: {e.stderr}")
        return False

def check_python_version():
    """Verifica la versi√≥n de Python"""
    version = sys.version_info
    print(f"üêç Python {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ö†Ô∏è  Advertencia: Se recomienda Python 3.8 o superior")
        return False
    return True

def upgrade_pip():
    """Actualiza pip a la √∫ltima versi√≥n"""
    return run_command(
        f"{sys.executable} -m pip install --upgrade pip",
        "Actualizando pip a la √∫ltima versi√≥n"
    )

def install_build_tools():
    """Instala herramientas de compilaci√≥n b√°sicas"""
    build_tools = [
        "setuptools",
        "wheel", 
        "cython",
        "numpy"
    ]
    
    command = f"{sys.executable} -m pip install {' '.join(build_tools)}"
    return run_command(
        command,
        "Instalando herramientas de compilaci√≥n (setuptools, wheel, cython, numpy)"
    )

def install_requirements():
    """Instala dependencias desde requirements.txt"""
    requirements_file = "requirements.txt"
    
    if not os.path.exists(requirements_file):
        print(f"‚ùå Error: No se encontr√≥ el archivo {requirements_file}")
        return False
    
    command = f"{sys.executable} -m pip install -r {requirements_file}"
    return run_command(
        command,
        "Instalando dependencias desde requirements.txt"
    )

def verify_installation():
    """Verifica que las dependencias principales est√©n instaladas"""
    print(f"\n{'='*60}")
    print("üîç Verificando instalaci√≥n")
    print(f"{'='*60}")
    
    required_packages = [
        "flask",
        "pyodbc", 
        "werkzeug",
        "jinja2",
        "waitress",
        "wfastcgi"
    ]
    
    all_installed = True
    
    for package in required_packages:
        try:
            __import__(package)
            print(f"‚úÖ {package}: Instalado")
        except ImportError:
            print(f"‚ùå {package}: NO instalado")
            all_installed = False
    
    return all_installed

def main():
    """Funci√≥n principal"""
    print("üöÄ Instalador de Dependencias - BuscaDatosPasajero")
    print("=" * 60)
    
    # Verificar versi√≥n de Python
    if not check_python_version():
        print("‚ö†Ô∏è  Continuando con la versi√≥n actual de Python...")
    
    success_count = 0
    total_steps = 4
    
    # Paso 1: Actualizar pip
    if upgrade_pip():
        success_count += 1
    
    # Paso 2: Instalar herramientas de compilaci√≥n
    if install_build_tools():
        success_count += 1
    
    # Paso 3: Instalar dependencias
    if install_requirements():
        success_count += 1
    
    # Paso 4: Verificar instalaci√≥n
    if verify_installation():
        success_count += 1
    
    # Resumen final
    print(f"\n{'='*60}")
    print("üìä RESUMEN DE INSTALACI√ìN")
    print(f"{'='*60}")
    print(f"Pasos completados: {success_count}/{total_steps}")
    
    if success_count == total_steps:
        print("üéâ ¬°Instalaci√≥n completada exitosamente!")
        print("\nüìã Pr√≥ximos pasos:")
        print("   1. Ejecutar: python app.py")
        print("   2. Abrir navegador en: http://127.0.0.1:5000")
        return True
    else:
        print("‚ö†Ô∏è  Instalaci√≥n completada con algunos errores")
        print("\nüîß Soluciones sugeridas:")
        print("   1. Ejecutar como administrador")
        print("   2. Verificar conexi√≥n a internet")
        print("   3. Actualizar Python a una versi√≥n m√°s reciente")
        return False

if __name__ == "__main__":
    try:
        success = main()
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Instalaci√≥n cancelada por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n\nüí• Error inesperado: {e}")
        sys.exit(1)